"""
Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
"""

import json
import uuid
import os
from datetime import datetime
from typing import Dict, Any

import mcp.types as types

from mcp_server.logging_config import setup_instance_logger, close_instance_logger

# –õ–æ–≥–≥–µ—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
logger = setup_instance_logger("super_empath", "telegram")

async def tool_info() -> dict:
    """Returns information about the lng_telegram_super_empath tool."""
    return {
        "description": "Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
        "schema": {
            "type": "object",
            "properties": {
                "telegram_context": {
                    "type": "object",
                    "description": "Telegram context object with user and message information"
                }
            },
            "required": ["telegram_context"]
        }
    }

class SuperEmpathProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Super Empath –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.session_file = "mcp_server/config/telegram/super_empath_sessions.json"
        self._ensure_session_file()
        
    def _ensure_session_file(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(os.path.dirname(self.session_file), exist_ok=True)
        if not os.path.exists(self.session_file):
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump({"sessions": {}, "users": {}}, f)
                
    def _load_sessions(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.session_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {"sessions": {}, "users": {}}
            
    def _save_sessions(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Failed to save sessions: {e}")
            
    def improve_message(self, message: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        aggressive_patterns = [
            ("–¥–æ—Å—Ç–∞–ª", "–Ø —á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –º–æ–∂–µ–º —ç—Ç–æ –æ–±—Å—É–¥–∏—Ç—å?"),
            ("–±–µ—Å–∏—à—å", "–ú–µ–Ω—è —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"),
            ("–Ω–∞–¥–æ–µ–ª", "–ú–Ω–µ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤, –º–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ?"),
            ("–¥—É—Ä–∞–∫", "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"),
            ("–∏–¥–∏–æ—Ç", "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ø–æ–∫–æ–π–Ω–æ"),
            ("—Ç—É–ø–æ–π", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –µ—Å—Ç—å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ"),
            ("–Ω–µ —Ö–æ—á—É", "–ú–Ω–µ —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–∞—Ç—å"),
            ("–Ω–µ –±—É–¥—É", "–Ø –ø—Ä–µ–¥–ø–æ—á–µ–ª –±—ã –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"),
            ("–æ—Ç—Å—Ç–∞–Ω—å", "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"),
            ("–∑–∞—Ç–∫–Ω–∏—Å—å", "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"),
            ("–ø—Ä–æ—Ç–∏–≤–Ω–æ", "–ú–µ–Ω—è —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç"),
            ("–Ω–µ–Ω–∞–≤–∏–∂—É", "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏")
        ]
        
        for pattern, replacement in aggressive_patterns:
            if pattern in message_lower:
                return replacement
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–ø—Ä–∏–∑–Ω–∞–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è)
        if "!" in message and len(message) > 20:
            improved = message.replace("!", ".").strip()
            return improved + " –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?"
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        command_words = ["–¥–æ–ª–∂–µ–Ω", "–æ–±—è–∑–∞–Ω", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "—Å–µ–π—á–∞—Å –∂–µ"]
        if any(word in message_lower for word in command_words):
            return f"–ú–Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã: {message.lower().replace('–¥–æ–ª–∂–µ–Ω', '–º–æ–≥').replace('–æ–±—è–∑–∞–Ω', '—Å–º–æ–≥')}. –ö–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?"
            
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫–æ—Å—Ç–∏
        if len(message) > 10 and not message.endswith("?"):
            return f"–Ø —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å: {message}. –ö–∞–∫ —Ç—ã –∫ —ç—Ç–æ–º—É –æ—Ç–Ω–æ—Å–∏—à—å—Å—è?"
            
        return message
        
    def handle_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Super Empath"""
        message = telegram_context.get("message", "").strip()
        user_id = telegram_context.get("user_id")
        
        if message.startswith("/start"):
            return self._handle_start_command(telegram_context)
        elif message == "—Ç–∞–º–∞–º":
            return self._handle_approve_command(telegram_context)
        elif message == "–æ—Ç–±–æ–π":
            return self._handle_cancel_command(telegram_context)
        else:
            return self._handle_regular_message(telegram_context)
            
    def _handle_start_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = telegram_context.get("user_id")
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        message = telegram_context.get("message", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id –∏–∑ deep link
        session_id = None
        if " " in message:
            parts = message.split(" ", 1)
            if len(parts) > 1:
                session_id = parts[1]
                
        data = self._load_sessions()
        
        if session_id:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
            if session_id in data["sessions"]:
                session = data["sessions"][session_id]
                if user_id not in session["participants"]:
                    session["participants"].append(user_id)
                    session["last_activity"] = datetime.now().isoformat()
                    
                data["users"][str(user_id)] = {
                    "session_id": session_id,
                    "first_name": first_name,
                    "joined_at": datetime.now().isoformat()
                }
                
                self._save_sessions(data)
                
                return {
                    "response": f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Super Empath, {first_name}!\n\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏ {session_id}",
                    "session_id": session_id,
                    "action": "joined_session"
                }
            else:
                return {
                    "response": "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                    "action": "session_not_found"
                }
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            new_session_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            data["sessions"][new_session_id] = {
                "participants": [user_id],
                "created_at": datetime.now().isoformat(),
                "last_activity": datetime.now().isoformat(),
                "created_by": user_id
            }
            
            data["users"][str(user_id)] = {
                "session_id": new_session_id,
                "first_name": first_name,
                "joined_at": datetime.now().isoformat()
            }
            
            self._save_sessions(data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ bot username –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω)
            invite_link = f"https://t.me/BOT_USERNAME?start={new_session_id}"
            
            response = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Super Empath, {first_name}!

**Super Empath** - –≤–∞—à —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è.

–í–∞—à–∞ —Å–µ—Å—Å–∏—è: `{new_session_id}`
–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_link}

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
2. –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
3. –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
4. –ì–æ–≤–æ—Ä–∏—Ç–µ "—Ç–∞–º–∞–º" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ "–æ—Ç–±–æ–π" –¥–ª—è –æ—Ç–º–µ–Ω—ã

–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ! üí¨"""

            return {
                "response": response,
                "session_id": new_session_id,
                "invite_link": invite_link,
                "action": "created_session"
            }
            
    def _handle_regular_message(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = telegram_context.get("message", "")
        user_id = telegram_context.get("user_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data:
            return {
                "response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                "action": "not_registered"
            }
            
        # –£–ª—É—á—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        improved = self.improve_message(message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        user_data["pending_message"] = {
            "original": message,
            "improved": improved,
            "timestamp": datetime.now().isoformat()
        }
        
        data["users"][str(user_id)] = user_data
        self._save_sessions(data)
        
        response = f"""üìù **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
"{message}"

üí° **–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å:**
"{improved}"

–ù–∞–ø–∏—à–∏—Ç–µ "—Ç–∞–º–∞–º" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ "–æ—Ç–±–æ–π" –¥–ª—è –æ—Ç–º–µ–Ω—ã."""

        return {
            "response": response,
            "original": message,
            "improved": improved,
            "action": "message_processed"
        }
        
    def _handle_approve_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è '—Ç–∞–º–∞–º'"""
        user_id = telegram_context.get("user_id")
        
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data or "pending_message" not in user_data:
            return {
                "response": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                "action": "no_pending_message"
            }
            
        pending = user_data["pending_message"]
        session_id = user_data["session_id"]
        
        if session_id not in data["sessions"]:
            return {
                "response": "–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "action": "session_error"
            }
            
        session = data["sessions"][session_id]
        participants = session["participants"]
        
        # –û—á–∏—â–∞–µ–º pending message
        del user_data["pending_message"]
        data["users"][str(user_id)] = user_data
        self._save_sessions(data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        other_participants = [p for p in participants if p != user_id]
        
        return {
            "response": f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(other_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
            "action": "message_approved",
            "improved_message": pending["improved"],
            "original_message": pending["original"],
            "recipients": other_participants,
            "sender_name": user_data.get("first_name", "–£—á–∞—Å—Ç–Ω–∏–∫"),
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å–ª–æ–µ–º
            "auto_send": {
                "to_users": other_participants,
                "message": f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data.get('first_name', '–£—á–∞—Å—Ç–Ω–∏–∫–∞')}:\n\n{pending['improved']}"
            }
        }
        
    def _handle_cancel_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã '–æ—Ç–±–æ–π'"""
        user_id = telegram_context.get("user_id")
        
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data or "pending_message" not in user_data:
            return {
                "response": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                "action": "no_pending_operation"
            }
            
        # –û—á–∏—â–∞–µ–º pending message
        del user_data["pending_message"]
        data["users"][str(user_id)] = user_data
        self._save_sessions(data)
        
        return {
            "response": "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            "action": "operation_cancelled"
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
_processor = SuperEmpathProcessor()

def tool_lng_telegram_super_empath(
    telegram_context: dict
) -> Dict[str, Any]:
    """
    Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç telegram_context –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫—É
    """
    
    try:
        if not telegram_context:
            return {"error": "telegram_context is required"}
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –æ–±—ä–µ–∫—Ç, –∏ JSON —Å—Ç—Ä–æ–∫—É
        context_obj = telegram_context
        if isinstance(telegram_context, str):
            import json
            try:
                context_obj = json.loads(telegram_context)
                logger.info("Parsed telegram_context from JSON string")
            except json.JSONDecodeError as e:
                logger.error(f"Invalid JSON in telegram_context: {e}")
                return {"error": f"Invalid telegram_context JSON: {e}"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(context_obj, dict):
            logger.error(f"telegram_context must be dict or JSON string, got: {type(telegram_context)}")
            return {"error": f"Invalid telegram_context type: {type(telegram_context)}"}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = _processor.handle_command(context_obj)
        
        logger.info(f"Processed message from user {context_obj.get('user_id')}: {context_obj.get('message')}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error in super empath tool: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return {"error": f"Super empath processing failed: {e}"}

async def run_tool(name: str, parameters: dict) -> list[types.Content]:
    """Executes the Super Empath tool."""
    try:
        result = tool_lng_telegram_super_empath(**parameters)
        return [types.TextContent(type="text", text=json.dumps(result, indent=2, ensure_ascii=False))]
    except Exception as e:
        error_result = {"error": str(e)}
        return [types.TextContent(type="text", text=json.dumps(error_result, ensure_ascii=False))]
