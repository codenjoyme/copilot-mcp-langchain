"""
Telegram Polling Server - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–æ–≤
"""

import asyncio
import json
import uuid
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict

import mcp.types as types
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

from mcp_server.logging_config import setup_logging

logger = setup_logging("lng_telegram_polling_server")

async def tool_info() -> dict:
    """Returns information about the lng_telegram_polling_server tool."""
    return {
        "description": "Telegram Polling Server - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–∞–º–∏",
        "schema": {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": ["start", "stop", "status", "send_message", "send_to_session"],
                    "description": "Operation to perform"
                },
                "bot_token": {
                    "type": "string",
                    "description": "Telegram bot token (required for start operation)"
                },
                "user_id": {
                    "type": "integer",
                    "description": "User ID for sending messages"
                },
                "message": {
                    "type": "string",
                    "description": "Message text to send"
                },
                "session_id": {
                    "type": "string",
                    "description": "Session ID for user management"
                },
                "pipeline": {
                    "type": "array",
                    "description": "Pipeline to execute on message received",
                    "items": {
                        "type": "object"
                    }
                },
                "exclude_user": {
                    "type": "integer",
                    "description": "User ID to exclude when sending to session"
                }
            },
            "required": ["operation"]
        }
    }

def tool_lng_telegram_polling_server(operation: str = "status") -> Dict[str, Any]:
    """Simple telegram polling server tool"""
    try:
        if operation == "status":
            return {"running": False, "message": "Telegram polling server not implemented yet"}
        else:
            return {"error": f"Unknown operation: {operation}"}
    except Exception as e:
        return {"error": str(e)}

async def run_tool(name: str, parameters: dict) -> list[types.Content]:
    """Executes the Telegram polling server tool."""
    try:
        result = tool_lng_telegram_polling_server(**parameters)
        return [types.TextContent(type="text", text=json.dumps(result, indent=2, ensure_ascii=False))]
    except Exception as e:
        error_result = {"error": str(e)}
        return [types.TextContent(type="text", text=json.dumps(error_result, ensure_ascii=False))]

@dataclass
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: str
    first_name: str
    session_id: Optional[str] = None
    current_message_processing: Optional[str] = None
    joined_at: Optional[str] = None

@dataclass
class SessionState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    session_id: str
    participants: List[int]
    created_at: str
    last_activity: str
    message_queue: List[Dict] = None

    def __post_init__(self):
        if self.message_queue is None:
            self.message_queue = []

class TelegramPollingServer:
    """–°–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º –≤ polling —Ä–µ–∂–∏–º–µ"""
    
    def __init__(self, token: str, pipeline: List[Dict] = None):
        self.token = token
        self.bot = Bot(token=token)
        self.application = Application.builder().token(token).build()
        self.pipeline = pipeline or []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.users: Dict[int, UserState] = {}
        self.sessions: Dict[str, SessionState] = {}
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            user_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–µ—Å—Å–∏–∏ –∏–∑ deep link
            session_id = None
            if context.args:
                session_id = context.args[0]
                
            logger.info(f"User {user_id} started bot with session_id: {session_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = UserState(
                user_id=user_id,
                username=user.username or "",
                first_name=user.first_name or "",
                session_id=session_id,
                joined_at=datetime.now().isoformat()
            )
            self.users[user_id] = user_state
            
            if session_id:
                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
                await self._join_session(user_id, session_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                new_session_id = await self._create_session(user_id)
                await self._send_invitation_link(user_id, new_session_id)
                
        except Exception as e:
            logger.error(f"Error in start handler: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É")
            
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if user_id not in self.users:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
                
            user_state = self.users[user_id]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._process_message_pipeline(user_id, message_text, update)
            
        except Exception as e:
            logger.error(f"Error in message handler: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
    async def _create_session(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        session_state = SessionState(
            session_id=session_id,
            participants=[user_id],
            created_at=datetime.now().isoformat(),
            last_activity=datetime.now().isoformat()
        )
        
        self.sessions[session_id] = session_state
        self.users[user_id].session_id = session_id
        
        logger.info(f"Created session {session_id} for user {user_id}")
        return session_id
        
    async def _join_session(self, user_id: int, session_id: str):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if session_id in self.sessions:
            session = self.sessions[session_id]
            if user_id not in session.participants:
                session.participants.append(user_id)
                session.last_activity = datetime.now().isoformat()
                
            self.users[user_id].session_id = session_id
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            user_state = self.users[user_id]
            join_message = f"üëã {user_state.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏"
            
            for participant_id in session.participants:
                if participant_id != user_id:
                    await self.bot.send_message(participant_id, join_message)
                    
            await self.bot.send_message(user_id, f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏ {session_id}")
            logger.info(f"User {user_id} joined session {session_id}")
        else:
            await self.bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    async def _send_invitation_link(self, user_id: int, session_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        bot_username = (await self.bot.get_me()).username
        invite_link = f"https://t.me/{bot_username}?start={session_id}"
        
        message = f"""üéØ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!
        
–í–∞—à ID —Å–µ—Å—Å–∏–∏: `{session_id}`
–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_link}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏."""
        
        await self.bot.send_message(user_id, message, parse_mode='Markdown')
        
    async def _process_message_pipeline(self, user_id: int, message_text: str, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ pipeline"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è pipeline
            user_state = self.users[user_id]
            session_state = self.sessions.get(user_state.session_id) if user_state.session_id else None
            
            context = {
                "telegram": {
                    "user_id": user_id,
                    "message": message_text,
                    "user_state": asdict(user_state),
                    "session_state": asdict(session_state) if session_state else None,
                    "update": update,
                    "bot": self
                }
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º pipeline –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
            if self.pipeline:
                for step in self.pipeline:
                    tool_name = step.get("tool")
                    tool_params = step.get("params", {})
                    
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    processed_params = self._substitute_context(tool_params, context)
                    
                    try:
                        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        # result = await execute_tool(tool_name, processed_params)
                        
                        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è pipeline
                        result = {"tool": tool_name, "params": processed_params}
                        logger.info(f"Pipeline step {tool_name} would be executed with params: {processed_params}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        output_var = step.get("output")
                        if output_var:
                            context[output_var] = result
                            
                    except Exception as e:
                        logger.error(f"Error executing pipeline step {tool_name}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in message pipeline: {e}")
            
    def _substitute_context(self, params: Dict, context: Dict) -> Dict:
        """–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        result = {}
        for key, value in params.items():
            if isinstance(value, str) and "{!" in value and "!}" in value:
                # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                if "{! telegram.message !}" in value:
                    value = value.replace("{! telegram.message !}", context["telegram"]["message"])
                if "{! telegram.user_id !}" in value:
                    value = value.replace("{! telegram.user_id !}", str(context["telegram"]["user_id"]))
            result[key] = value
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–∞
_server_instance: Optional[TelegramPollingServer] = None

async def start_polling_server(token: str, pipeline: List[Dict] = None) -> TelegramPollingServer:
    """–ó–∞–ø—É—Å–∫ polling —Å–µ—Ä–≤–µ—Ä–∞"""
    global _server_instance
    
    if _server_instance and _server_instance.running:
        logger.warning("Polling server already running")
        return _server_instance
        
    _server_instance = TelegramPollingServer(token, pipeline)
    _server_instance.running = True
    
    logger.info("Starting Telegram polling server...")
    await _server_instance.application.run_polling()
    
    return _server_instance

async def stop_polling_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Å–µ—Ä–≤–µ—Ä–∞"""
    global _server_instance
    
    if _server_instance and _server_instance.running:
        logger.info("Stopping Telegram polling server...")
        await _server_instance.application.stop()
        _server_instance.running = False
        _server_instance = None

async def send_message(user_id: int, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    global _server_instance
    
    if not _server_instance:
        logger.error("Polling server not running")
        return False
        
    try:
        await _server_instance.bot.send_message(user_id, text)
        return True
    except TelegramError as e:
        logger.error(f"Error sending message to {user_id}: {e}")
        return False

async def send_to_session(session_id: str, text: str, exclude_user: Optional[int] = None) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏"""
    global _server_instance
    
    if not _server_instance:
        logger.error("Polling server not running")
        return 0
        
    if session_id not in _server_instance.sessions:
        logger.error(f"Session {session_id} not found")
        return 0
        
    session = _server_instance.sessions[session_id]
    sent_count = 0
    
    for user_id in session.participants:
        if exclude_user and user_id == exclude_user:
            continue
            
        if await send_message(user_id, text):
            sent_count += 1
            
    return sent_count

def get_server_status() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    global _server_instance
    
    if not _server_instance:
        return {"running": False, "users": 0, "sessions": 0}
        
    return {
        "running": _server_instance.running,
        "users": len(_server_instance.users),
        "sessions": len(_server_instance.sessions),
        "user_list": list(_server_instance.users.keys()),
        "session_list": list(_server_instance.sessions.keys())
    }

def tool_lng_telegram_polling_server(
    operation: str,
    token: str = None,
    user_id: int = None,
    session_id: str = None,
    message: str = None,
    pipeline: List[Dict] = None,
    exclude_user: int = None
) -> Dict[str, Any]:
    """
    Telegram Polling Server - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–∞–º–∏
    
    Operations:
    - start: –ó–∞–ø—É—Å–∫ polling —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    - stop: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞  
    - send_message: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    - send_to_session: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ —Å–µ—Å—Å–∏–∏
    - status: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    
    try:
        if operation == "start":
            if not token:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ .env
                from dotenv import load_dotenv
                load_dotenv()
                token = os.getenv("TELEGRAM_BOT_TOKEN")
                
                if not token:
                    return {"error": "Token is required for start operation"}
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
            if ":" not in token or len(token.split(":")) != 2:
                return {"error": "Invalid bot token format"}
            
            # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            import subprocess
            import sys
            import json
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            script_content = f'''
import asyncio
import os
import sys
sys.path.append(r"{os.getcwd()}")

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import uuid
from datetime import datetime

TOKEN = "{token}"
users = {{}}
sessions = {{}}

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    session_id = None
    if context.args:
        session_id = context.args[0]
    
    print(f"User {{user_id}} started bot with session_id: {{session_id}}")
    
    if session_id:
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
        if session_id in sessions:
            if user_id not in sessions[session_id]["participants"]:
                sessions[session_id]["participants"].append(user_id)
            await update.message.reply_text(f"‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏ {{session_id}}")
        else:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        new_session_id = str(uuid.uuid4())
        sessions[new_session_id] = {{
            "participants": [user_id],
            "created_at": datetime.now().isoformat()
        }}
        
        bot_username = (await context.bot.get_me()).username
        invite_link = f"https://t.me/{{bot_username}}?start={{new_session_id}}"
        
        message = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Super Empath Bot!

–í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: `{{new_session_id}}`
–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {{invite_link}}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏.
"""
        await update.message.reply_text(message, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    
    print(f"Message from {{user_id}}: {{message_text}}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if message_text == "—Ç–∞–º–∞–º":
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    elif message_text == "–æ—Ç–±–æ–π":
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await update.message.reply_text(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{{message_text}}'\\n\\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—è–≥—á–µ. –ù–∞–ø–∏—à–∏—Ç–µ '—Ç–∞–º–∞–º' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–æ—Ç–±–æ–π' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", handle_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print(f"Starting Telegram bot {{TOKEN[:10]}}...")
    application.run_polling()

if __name__ == "__main__":
    main()
'''
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            script_path = "temp_telegram_bot.py"
            with open(script_path, "w", encoding="utf-8") as f:
                f.write(script_content)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen([
                sys.executable, script_path
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            import time
            time.sleep(2)
            
            if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
                return {
                    "status": "started",
                    "message": f"Super Empath Bot –∑–∞–ø—É—â–µ–Ω! –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{token.split(':')[0]} –≤ Telegram",
                    "bot_username": f"–í–∞—à –±–æ—Ç: @super_empath_bot (–∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ —Ç–æ–∫–µ–Ω—É {token.split(':')[0]})",
                    "process_id": process.pid,
                    "instructions": [
                        "1. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram",
                        "2. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏", 
                        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É",
                        "4. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è - –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è"
                    ]
                }
            else:
                return {"error": "Failed to start bot", "details": process.stderr.read().decode()}
                
        elif operation == "stop":
            # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            import psutil
            stopped_count = 0
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if 'python' in proc.info['name'].lower() and 'temp_telegram_bot.py' in str(proc.info['cmdline']):
                        proc.terminate()
                        stopped_count += 1
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists("temp_telegram_bot.py"):
                os.remove("temp_telegram_bot.py")
            
            return {
                "status": "stopped", 
                "message": f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"
            }
            
        elif operation == "send_message":
            return {"error": "send_message operation not implemented in simplified version"}
            
        elif operation == "send_to_session":
            return {"error": "send_to_session operation not implemented in simplified version"}
            
        elif operation == "status":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
            import psutil
            running_bots = 0
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if 'python' in proc.info['name'].lower() and 'temp_telegram_bot.py' in str(proc.info['cmdline']):
                        running_bots += 1
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            return {
                "running": running_bots > 0,
                "running_bots": running_bots,
                "message": f"–ù–∞–π–¥–µ–Ω–æ {running_bots} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤"
            }
            
        elif operation == "status":
            status = get_server_status()
            return status
            
        else:
            return {"error": f"Unknown operation: {operation}"}
            
    except Exception as e:
        logger.error(f"Error in telegram polling server: {e}")
        return {"error": str(e)}
