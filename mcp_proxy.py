#!/usr/bin/env python3
"""
–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import json
import sys
import subprocess
import threading
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse
import logging

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MCPHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MCP"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy",
                "timestamp": time.time()
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/execute':
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                tool = request_data.get('tool')
                params = request_data.get('params', {})
                
                logger.info(f"Executing tool: {tool} with params: {params}")
                
                # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if tool == "f1e_lng_count_words":
                    text = params.get('input_text', '')
                    word_count = len(text.split())
                    result = f"Word count: {word_count}"
                    
                elif tool == "f1e_lng_math_calculator":
                    expression = params.get('expression', '')
                    try:
                        # –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
                        result = str(eval(expression))
                    except:
                        result = "Error: Invalid expression"
                        
                else:
                    result = f"Tool '{tool}' executed with params: {params}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                
                response = {
                    "success": True,
                    "result": [result],
                    "execution_time": 0.1,
                    "timestamp": time.time()
                }
                
                self.wfile.write(json.dumps(response).encode())
                logger.info(f"Tool {tool} executed successfully")
                
            except Exception as e:
                logger.error(f"Error processing request: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                
                response = {
                    "success": False,
                    "error": str(e),
                    "execution_time": 0.0,
                    "timestamp": time.time()
                }
                
                self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        logger.info(format % args)

def run_server(host='127.0.0.1', port=8080):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = (host, port)
    httpd = HTTPServer(server_address, MCPHandler)
    
    print(f"üöÄ Starting test server on http://{host}:{port}")
    print("üìç Available endpoints:")
    print("  GET  /health  - Check server health")
    print("  POST /execute - Execute tools")
    print("‚èπÔ∏è  Press Ctrl+C to stop")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
        httpd.server_close()

if __name__ == "__main__":
    run_server()
